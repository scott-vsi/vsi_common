#!/usr/bin/false
# Source this file

#****F* vsi/elements.bsh
# NAME
#   elements.bsh - Set of -euE safe functions to make bash array manipulation easy
# SYNOPSIS
#   Set of functions for deleting, pre-pending and appending without repetition.
#   Versions using actual Bash arrays are suffixed with a _a, else it works on
#   delimiter(ELEMENT_SEPARATOR) separated string
#
#   Most of these functions use variable indirection when possible to make using
#   them friendlier
# BUGS
#   Don't use arrays element_array variable 
#   - element_array_target_u3l
#   - element_array_target_qzx
#   - element_array_target_dsa
#   as the target. It will cause name collision
#***

: ${VSI_COMMON_DIR="$(dirname "${BASH_SOURCE[0]}")/.."}
source "${VSI_COMMON_DIR}/linux/set_flags.bsh"

#****f* elements.bsh/dynamic_set_a
# NAME
#   dynamic_set_a - Dynamically set an array to values from arguments
# INPUTS
#   $1 - Name of array to be set
#   [$2...] - Values to set 
# EXAMPLE
#   dynamic_set_a my_array_name 11 "2 2" 33
#   # Is like executing 
#   # my_array_name=(11 "2 2" 33)
# NOTES
#   Does not clear the array names by $1. So if the array had 4 elements in it
#   and dynamic_set_a is called with 3 elements, the 4th  element is still set
#
#   This is not a bug, but by design. "unset" the array prior to calling 
#   dynamic_set_a.
# AUTHOR
#   Andy Neff
#***
function dynamic_set_a()
{
  local element_array_target_dsa=$1
  shift 1
  for (( i=0; $#; i++ )); do
    read -r "${element_array_target_dsa}[$i]" <<< "$1"
    shift 1
  done
}

#****f* elements.bsh/remove_element_a
# NAME
#   remove_element_a - Removes all instances of a value from an array
# INPUTS
#   $1 - Name of array to be set
#   $2 - Value to be removes 
# EXAMPLE
#   x=(11 22 33 22 44)
#   remove_element_a x 22
#   # declare -a x='([0]="11" [1]="33" [2]="44")'
# NOTES
#   The resulting array does is sequentially indexed, which is not typical in
#   bash when removing elements from an array
# AUTHOR
#   Andy Neff
#***
function remove_element_a()
{
  local element_array_target_u3l=()

  if [ "${!1+set}" == "set" ]; then
    local target=${1}[@]
    element_array_target_u3l=( ${!target} )
    unset target
  else #If it's empty/does not exist, there is nothing to remove
    return 0
  fi
  local i

  for i in "${!element_array_target_u3l[@]}"; do
    if [ "${element_array_target_u3l[$i]}" == "$2" ]; then
      unset element_array_target_u3l[$i]
    fi
  done

  # Do NOT use unset here. If you do that, you will lose "local" status. if the
  # variable that $1 points to has it. This can have MANY unintended 
  # consequences which is generally BAD! Gotta eval :(
  # http://stackoverflow.com/questions/10497425/is-it-possible-to-use-array-in-bash#comment74842477_10497539
  eval "${1}=()"

  # You can't use ${t+"${t[@]}"} notation when there is a chance that the first
  # element of an array has been unset. This will falsely trigger ${t} as not
  # existing because ${t} REALLY means ${t[0]} which doesn't exist, but the rest
  # of ${t[@]} DOES! Solution is to disable set -u if it's set, and then 
  # re-enable it if and only if it was set before all this. set_flags contains
  # this logic
  unset_flag u
  dynamic_set_a $1 "${element_array_target_u3l[@]}"
  reset_flag u
}

#****f* elements.bsh/remove_element
# NAME
#   remove_element - String version of remove_element_a
# INPUTS
#   ELEMENT_SEPARATOR - IFS Seperator used
#   $1 - Name of array to be set
#   $2 - Value to be removes 
# AUTHOR
#   Andy Neff
#***
function remove_element()
{
  local IFS="${ELEMENT_SEPARATOR-:}"
  local target=$1
  local element_array_target_qzx=()
  if [ "${!target+set}" == "set" ]; then
    element_array_target_qzx=( ${!target} )
  fi
  remove_element_a element_array_target_qzx "$2"
  export $target="${element_array_target_qzx[*]}"
}

#****f* elements.bsh/add_element_post_a
# NAME
#   add_element_post_a - Add a value to the end of an array
# SYNOPSIS
#   Removes all copies of the value from the array first, and then appends to
#   the end of he array
# INPUTS
#   $1 - Name of array to be set
#   $2 - Value to be appended 
# EXAMPLE
#   x=(22 11 22 33)
#   add_element_post_a x 22
#   declare -p x
#   # declare -a x='([0]="11" [1]="33" [2]="22")'
# NOTES
#   The resulting array does is sequentially indexed
# AUTHOR
#   Andy Neff
#***
function add_element_post_a()
{
  remove_element_a $1 "$2"
  local target=$1[@]
  local element_array_target_u3l=()
  if [ "${!1+set}" == "set" ]; then
    element_array_target_u3l=( ${!target} )
  fi
  dynamic_set_a $1 ${element_array_target_u3l+"${element_array_target_u3l[@]}"} "$2"
}

#****f* elements.bsh/add_element_post
# NAME
#   add_element_post - String version of add_element_post_a
# INPUTS
#   ELEMENT_SEPARATOR - IFS Seperator used
#   $1 - Name of array to be set
#   $2 - Value to be appended 
# AUTHOR
#   Andy Neff
#***
function add_element_post ()
{
  local IFS="${ELEMENT_SEPARATOR-:}"
  local target=$1
  local element_array_target_qzx=()
  if [ "${!target+set}" == "set" ]; then
    element_array_target_qzx=( ${!target} )
  fi
  add_element_post_a element_array_target_qzx "$2"
  export $target="${element_array_target_qzx[*]}"
}

#****f* elements.bsh/add_element_pre_a
# NAME
#   add_element_pre_a - Add a value to the beginning of an array
# SYNOPSIS
#   Removes all copies of the value from the array first, and then prepends to
#   the beginning of he array
# INPUTS
#   $1 - Name of array to be set
#   $2 - Value to be prepended
# EXAMPLE
#   x=(11 22 33 22)
#   add_element_pre_a x 22
#   declare -p x
#   # declare -a x='([0]="22" [1]="11" [2]="33")'
# NOTES
#   The resulting array does is sequentially indexed
# AUTHOR
#   Andy Neff
#***
function add_element_pre_a()
{
  remove_element_a $1 "$2"
  local target=$1[@]
  local element_array_target_u3l=()
  if [ "${!1+set}" == "set" ]; then
    element_array_target_u3l=( ${!target} )
  fi
  dynamic_set_a $1 "$2" ${element_array_target_u3l+"${element_array_target_u3l[@]}"}
}

#****f* elements.bsh/add_element_pre
# NAME
#   add_element_pre - String version of add_element_post_a
# INPUTS
#   ELEMENT_SEPARATOR - IFS Seperator used
#   $1 - Name of array to be set
#   $2 - Value to be appended 
# AUTHOR
#   Andy Neff
#***
function add_element_pre ()
{
  local IFS="${ELEMENT_SEPARATOR-:}"
  local target=$1
  local element_array_target_qzx=()
  if [ "${!target+set}" == "set" ]; then
    element_array_target_qzx=( ${!target} )
  fi
  add_element_pre_a element_array_target_qzx "$2"
  export $target="${element_array_target_qzx[*]}"
}
